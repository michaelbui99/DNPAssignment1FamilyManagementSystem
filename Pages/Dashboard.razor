@page "/Dashboard"
@using ChartJs.Blazor.PieChart
@using DNPAssignment1FamilyManagementSystem.Data
@using DNPAssignment1FamilyManagementSystem.Models
@using System.Drawing
@inject IFamilyStatisticsService FamilyStatisticsService
<AuthorizeView>
    <Authorized>
        <h3>Dashboard</h3>
        <p>Welcome to Families Dashboard</p>
        <div class="charts-container">
            <Chart Config="_eyeColorPieConfig"></Chart>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private PieConfig _eyeColorPieConfig;

    protected override Task OnInitializedAsync()
    {
        InitEyeColorDistributionEyeChart();
        return base.OnInitializedAsync();
    }


    private void InitEyeColorDistributionEyeChart()
    {
        //Creating a new PieConfig
        _eyeColorPieConfig = new PieConfig()
        {
            Options = new PieOptions()
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = "Eye Color Distribution"
                }
            }
        };

        //Adding Chart Labels
        foreach (string color in FamilyStatisticsService.GetEyeColorDistribution().Keys)
        {
            _eyeColorPieConfig.Data.Labels.Add(color);
        }

        
        //TODO: Find a solution to adding unspecified HTML colors without a chain of if-statements 
        /*
         *Dynamically adding color to pie slices depending on the eye color
         * The Data set contains eye colors that are not known colors defined by HTML specifications
         * resulting in the chain of if-statements
         */
        IList<String> eyeColorsAsColorExStrings = new List<string>(); 
        foreach (var key in FamilyStatisticsService.GetEyeColorDistribution().Keys)
        {
            Color color;  
            if (key.ToLower() == "grey")
            {
                color = Color.FromName("Gray");
            }
            else if (key.ToLower() == "amber")
            {
                color = Color.FromArgb(255,191,0); 
            }
            else if (key.ToLower() == "hazel")
            {
                color = Color.FromArgb(201, 199, 137); 
            }
            else
            {
             color = Color.FromName(key); 
            }
            eyeColorsAsColorExStrings.Add(ColorUtil.ColorString(color.R, color.G, color.B));
        }

        PieDataset<int> dataset = new PieDataset<int>(FamilyStatisticsService.GetEyeColorDistribution().Values)
        {
            BackgroundColor = eyeColorsAsColorExStrings.ToArray()
            
        };

        _eyeColorPieConfig.Data.Datasets.Add(dataset);
    }

}