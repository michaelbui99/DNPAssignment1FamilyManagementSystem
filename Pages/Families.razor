@page "/Families"
@using DNPAssignment1FamilyManagementSystem.Data
@using DNPAssignment1FamilyManagementSystem.Components

@using System.ComponentModel.DataAnnotations
@using DNPAssignment1FamilyManagementSystem.Data.Impl
@using DNPAssignment1FamilyManagementSystem.Models
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject IFamilyService FamilyService
@inject IEventCoordinator EventCoordinator
@implements DNPAssignment1FamilyManagementSystem.Models.IEventListener

<AuthorizeView>
    <Authorized>
        <div class="families-container animation-fade-in">
            <div class="families-container__header">
                <h3>Families <i class="fas fa-plus" @onclick="() => _addFamilyToggle = !_addFamilyToggle"></i></h3>
                <input type="text" placeholder="Search by name of adult" @oninput="(args) => FilterAdultsByName(args)">
            </div>
            @if (_addFamilyToggle)
            {
                <div class="add-family-container animation-fade-in">
                    <div class="form-group">
                        <label>Street name</label>
                        <input type="text" placeholder="Street name" @bind-value="_familyToAdd.StreetName">
                    </div>
                    <div class="form-group">
                        <label>House Number</label>
                        <input type="number" placeholder="House Number" @bind-value="_familyToAdd.HouseNumber">
                    </div>
                    <p class="error-label">@_addFamilyErrorLabel</p>
                    @foreach (var error in _validationResults)
                    {
                        <p class="error-label">@error</p>
                    }
                    <button @onclick="AddNewFamily">
                        Add Family
                    </button>

                </div>
            }

            @if (_familiesToShow is null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!_familiesToShow.Any())
            {
                <p>
                    <em>No Families has been created yet.</em>
                </p>
            }
            else
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th></th>
                        <th>Street Name</th>
                        <th>House No</th>
                        <th>Member Count</th>
                        <th>Delete</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var f in _familiesToShow)
                    {
                        <ExpandableFamilyTableRow Family="f">
                            <tr>
                                <td colspan="4">
                                    <div class="content-container animation-fade-in">
                                        <div class="adults-container">
                                            @if (f.Adults.Count >= 2)
                                            {
                                                <h4>Adults: <button class="disabled"><i class="fas fa-plus"></i>Add Adult</button></h4>
                                            }
                                            else
                                            {
                                                <h4>Adults: <button @onclick="() => GoToAddAdult(f)"><i class="fas fa-plus"></i>Add Adult</button></h4>
                                            }
                                            @foreach (var a in f.Adults)
                                            {
                                                <PersonInfomation Person=@a Family="f" DeleteStrategy="new DeleteAdultStrategy(FamilyService)"/>
                                                <p>Job: @a.JobTitle.JobTitle</p>
                                                <p>Salary: @a.JobTitle.Salary</p>
                                                <br/>
                                            }
                                        </div>

                                        <div class="children-container">
                                            <h4>Children: </h4>
                                            @foreach (var c in f.Children)
                                            {
                                                <PersonInfomation Person=@c Family="f" DeleteStrategy="new DeleteChildrenStrategy(FamilyService)"/>

                                                <p>Interests:</p>
                                                <ul>
                                                    @foreach (var interest in c.Interests)
                                                    {
                                                        <li>@interest.Type</li>
                                                    }
                                                </ul>
                                                <p>Personal Pets:</p>
                                                <ul>
                                                    @foreach (var pet in c.Pets)
                                                    {
                                                        <li>Species: @pet.Species <br/>Name: @pet.Name<br/>Age: @pet.Age</li>
                                                    }
                                                </ul>
                                                <br/>
                                            }
                                        </div>

                                        <div class="family-pet-container">
                                            <h4>Pets: </h4>
                                            @foreach (var p in f.Pets)
                                            {
                                                <PetInformation Pet=@p/>
                                                <br/>
                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </ExpandableFamilyTableRow>
                    }
                    </tbody>
                </table>
            }

        </div>
    </Authorized>
</AuthorizeView>

@code {
    private IList<Family> _familiesToShow;
    private IList<Family> _allFamilies;
    private bool _addFamilyToggle = false;
    private string _filterAdultByName;
    private string _addFamilyErrorLabel;
    private Family _familyToAdd = new Family();
    List<ValidationResult> _validationResults = new();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            _allFamilies = FamilyService.GetFamilies();
            _familiesToShow = _allFamilies;
            EventCoordinator.Attach(this);
        }
    }

    private void FilterAdultsByName(ChangeEventArgs args)
    {
        _filterAdultByName = null;
        _filterAdultByName = args.Value.ToString();

        if (_filterAdultByName != null)
        {
            List<Family> familiesWithAdultsWithNameMatch = new List<Family>();

            foreach (var family in _allFamilies)
            {
                bool adultWithNameMatchFound = false;
                foreach (var adult in family.Adults)
                {
                    if ($"{adult.FirstName} {adult.LastName}".ToLower().Contains(_filterAdultByName.ToLower()))
                    {
                        adultWithNameMatchFound = true;
                        break;
                    }
                }
                if (adultWithNameMatchFound)
                {
                    familiesWithAdultsWithNameMatch.Add(family);
                }
            }

            _familiesToShow = familiesWithAdultsWithNameMatch;
        }
        else
        {
            _familiesToShow = _allFamilies;
        }
    }

    private void GoToAddAdult(Family f)
    {
        NavigationManager.NavigateTo($"/AddAdult/{f.StreetName}/{f.HouseNumber}");
    }


    private void AddNewFamily()
    {
        _validationResults.Clear();
        ValidationContext validationContext = new ValidationContext(_familyToAdd);
        bool familyIsValid = Validator.TryValidateObject(_familyToAdd, validationContext, _validationResults, true);
        if (familyIsValid)
        {
            try
            {
                FamilyService.CreateFamily(_familyToAdd);
                _addFamilyToggle = !_addFamilyToggle;
            }
            catch (Exception e)
            {
                _addFamilyErrorLabel = e.Message;
                return;
            }
        }
    }

    public void Notify()
    {
        StateHasChanged();
    }

}