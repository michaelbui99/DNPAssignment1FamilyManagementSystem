@page "/Families"
@using DNPAssignment1FamilyManagementSystem.Data
@using DNPAssignment1FamilyManagementSystem.Components

@using Models
@inject NavigationManager NavigationManager
@inject IFamilyService FamilyService
<AuthorizeView>
    <Authorized>
        <div class="families-container animation-fade-in">
            <div class="families-container__header">
                <h3>Families</h3>
                <input type="text" placeholder="Search by name of adult" @oninput="(args) => FilterAdultsByName(args)">
            </div>
            @if (_familiesToShow is null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!_familiesToShow.Any())
            {
                <p>
                    <em>No Families has been created yet.</em>
                </p>
            }
            else
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th></th>
                        <th>Street Name</th>
                        <th>House No</th>
                        <th>Member Count</th>
                        <th>Delete</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var f in _familiesToShow)
                    {
                        <ExpandableFamilyTableRow Family="f">
                            <tr>
                                <td colspan="4">
                                    <div class="content-container animation-fade-in">
                                        <div class="adults-container">
                                            @if (f.Adults.Count >= 2)
                                            {
                                                <h4>Adults: <button class="disabled"><i class="fas fa-plus"></i>Add Adult</button></h4>
                                                
                                            }
                                            else
                                            {
                                            <h4>Adults: <button @onclick="() => GoToAddAdult(f)"><i class="fas fa-plus"></i>Add Adult</button></h4>
                                            }
                                            @foreach (var a in f.Adults)
                                            {
                                                <PersonInfomation Person=@a/>
                                                <p>Job: @a.JobTitle.JobTitle</p>
                                                <p>Salary: @a.JobTitle.Salary</p>
                                                <br/>
                                            }
                                        </div>
                                        
                                        <div class="children-container">
                                            <h4>Children: </h4>
                                            @foreach (var c in f.Children)
                                            {
                                                <PersonInfomation Person=@c/>
                                                <br/>
                                            }
                                        </div>
                                        
                                        <div class="family-pet-container">
                                            <h4>Pets: </h4>
                                            @foreach (var p in f.Pets)
                                            {
                                                <PetInformation Pet=@p/>
                                                <br/>

                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </ExpandableFamilyTableRow>
                    }
                    </tbody>
                </table>
            }

        </div>
    </Authorized>
</AuthorizeView>

@code {
    private IList<Family> _familiesToShow;
    private IList<Family> _allFamilies;

    private string _filterAdultByName;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            _allFamilies = FamilyService.GetFamilies();
            _familiesToShow = _allFamilies;
        }
    }

    private void FilterAdultsByName(ChangeEventArgs args)
    {
        _filterAdultByName = null;
        _filterAdultByName = args.Value.ToString();

        if (_filterAdultByName != null)
        {
            List<Family> familiesWithAdultsWithNameMatch = new List<Family>();

            foreach (var family in _allFamilies)
            {
                bool adultWithNameMatchFound = false;
                foreach (var adult in family.Adults)
                {
                    if ($"{adult.FirstName} {adult.LastName}".ToLower().Contains(_filterAdultByName.ToLower()))
                    {
                        adultWithNameMatchFound = true;
                        break; 
                    }
                }
                if (adultWithNameMatchFound)
                {
                    familiesWithAdultsWithNameMatch.Add(family);
                }
            }

            _familiesToShow = familiesWithAdultsWithNameMatch; 
        }
        else
        {
            _familiesToShow = _allFamilies;
        }
    }

    private void GoToAddAdult(Family f)
    {
        NavigationManager.NavigateTo($"/AddAdult/{f.StreetName}/{f.HouseNumber}");
    }

}