@page "/Dashboard"
@using ChartJs.Blazor.PieChart
@using DNPAssignment1FamilyManagementSystem.Data
@using DNPAssignment1FamilyManagementSystem.Models
@using System.Drawing
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.LineChart
@using System.Collections.ObjectModel
@using ChartJs.Blazor.BarChart.Axes
@inject IFamilyStatisticsService FamilyStatisticsService
<AuthorizeView>
    <Authorized>
        @if (sideEffectsAreDone)
        {
            <h3>Dashboard</h3>
        <p>Welcome to Families Dashboard</p>
        <div class="charts-container">
            <div class="stats-container">
                <div class="stats-container__stats">
                    <span class="oi oi-people"></span>
                    <p>Families</p>
                    <p>@_totalAmountOfFamilies</p>
                    <p>In Total</p>
                </div>

                <div class="stats-container__stats">
                    <span class="oi oi-person"></span>
                    <p>Adults</p>
                    <p>@_totalAmountOfAdults</p>
                    <p>In Total</p>
                </div>


                <div class="stats-container__stats">
                    <span class="oi oi-person"></span>
                    <p>Children</p>
                    <p>@_totalAmountOfChildren</p>
                    <p>In Total</p>
                </div>

                <div class="stats-container__stats">
                    <span class="oi oi-bug"></span>

                    <p>Pets</p>
                    <p>@_totalAmountOfPets</p>
                    <p>In Total</p>
                </div>

                <div class="stats-container__stats">
                    <span class="oi oi-person"></span>
                    <p>Average amount of children</p>
                    <p>@_averageChildrenPerFamily</p>
                    <p>Per Family</p>
                </div>
            </div>


            <div class="chart-stat-container">
                <div>
                    <p>@_eyeColorDistributionData.Keys.Count</p>
                    <p>Different Eye Colors</p>
                </div>
                <Chart Config="_eyeColorPieConfig"></Chart>
            </div>
            <div class="chart-stat-container">
                <div>
                    <p>@_averageSalaryPerFamily</p>
                    <p> Earned on average per family per month</p>
                </div>
                <Chart Config="_salaryPieConfig"></Chart>
            </div>

        </div>
        }
        
        @if (!sideEffectsAreDone)
        {
            <p>Loading...</p>
        }
        
    </Authorized>
</AuthorizeView>

@code {
    private PieConfig _eyeColorPieConfig;
    private PieConfig _salaryPieConfig;
    private IDictionary<string, int> _eyeColorDistributionData;
    private int _totalAmountOfFamilies;
    private int _totalAmountOfAdults;
    private int _totalAmountOfChildren;
    private int _totalAmountOfPets;
    private decimal _averageChildrenPerFamily;
    private decimal _averageSalaryPerFamily;
    private bool sideEffectsAreDone = false; 
    
    protected override async Task OnInitializedAsync()
    {
       
        _totalAmountOfFamilies = await FamilyStatisticsService.GetTotalAmountOfFamiliesAsync();
        _totalAmountOfAdults = await FamilyStatisticsService.GetTotalAmountOfAdultsAsync();
        _totalAmountOfChildren = await FamilyStatisticsService.GetTotalAmountOfChildrenAsync();
        _totalAmountOfPets = await FamilyStatisticsService.GetTotalAmountOfPetsAsync();
        _averageChildrenPerFamily = await FamilyStatisticsService.GetAverageChildrenPerFamilyAsync();
        _averageSalaryPerFamily = await FamilyStatisticsService.GetAverageSalaryPerFamilyAsync();
        _eyeColorDistributionData = await FamilyStatisticsService.GetEyeColorDistributionAsync();

         await InitEyeColorDistributionEyeChart();
         await InitSalaryPieChart();
        sideEffectsAreDone = true; 
        StateHasChanged();
    }
    

    private async Task InitEyeColorDistributionEyeChart()
    {
    //Creating a new PieConfig
        _eyeColorPieConfig = new PieConfig()
        {
            Options = new PieOptions()
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = "Eye Color Distribution",
                    FontColor = "white"
                },
                Legend = new Legend()
                {
                    Labels = new LegendLabels()
                    {
                        FontColor = "white"
                    }
                }
            }
        };

    //Adding Chart Labels
        StateHasChanged();
        foreach (string color in _eyeColorDistributionData.Keys)
        {
            _eyeColorPieConfig.Data.Labels.Add(color);
        }


    //TODO: Find a solution to adding unspecified HTML colors without a chain of if-statements 
    /*
         *Dynamically adding color to pie slices depending on the eye color
         * The Data set contains eye colors that are not known colors defined by HTML specifications
         * resulting in the chain of if-statements as a temp fix
         */
        IList<String> eyeColorsAsColorExStrings = new List<string>();
        foreach (var key in _eyeColorDistributionData.Keys)
        {
            Color color;
            if (key.ToLower() == "grey")
            {
                color = Color.FromName("Gray");
            }
            else if (key.ToLower() == "amber")
            {
                color = Color.FromArgb(255, 191, 0);
            }
            else if (key.ToLower() == "hazel")
            {
                color = Color.FromArgb(201, 199, 137);
            }
            else
            {
                color = Color.FromName(key);
            }
            eyeColorsAsColorExStrings.Add(ColorUtil.ColorString(color.R, color.G, color.B));
        }

        PieDataset<int> dataset = new PieDataset<int>(_eyeColorDistributionData.Values)
        {
            BackgroundColor = eyeColorsAsColorExStrings.ToArray()
        };

        _eyeColorPieConfig.Data.Datasets.Add(dataset);
    }

    private async Task InitSalaryPieChart()
    {
        _salaryPieConfig = new PieConfig()
        {
            Options = new PieOptions()
            {
                Responsive = true, Title = new OptionsTitle()
                {
                    Display = true, Text = "Salary Distribution", FontColor = "white"
                },
                Legend = new Legend()
                {
                    Labels = new LegendLabels()
                    {
                        FontColor = "white"
                    }
                }
            }
        };

        foreach (var keyValuePair in await FamilyStatisticsService.GetSalaryDistributionAsync())
        {
            _salaryPieConfig.Data.Labels.Add(keyValuePair.Key);
        }

        string[] knownColors = Enum.GetNames(typeof(System.Drawing.KnownColor));
        List<string> knownColorsAsHexStrings = new List<string>();
        
        foreach (var knownColor in knownColors)
        {
            Color color = Color.FromName(knownColor);
            knownColorsAsHexStrings.Add(ColorUtil.ColorHexString(color.R, color.G, color.B)); 
        }
        knownColorsAsHexStrings.Reverse();

        var salaryDistributionData = await FamilyStatisticsService.GetSalaryDistributionAsync(); 
        PieDataset<decimal> salaryDataSet = new PieDataset<decimal>( salaryDistributionData.Values)
        {
            BackgroundColor = knownColorsAsHexStrings.ToArray()
        };
        
        _salaryPieConfig.Data.Datasets.Add(salaryDataSet);
    }

}