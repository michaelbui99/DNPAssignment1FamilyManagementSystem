@page "/Login"
@using DNPAssignment1FamilyManagementSystem.Authentication
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <div class="login-container">

            <div class="left-section">
                <img src="images/Asset 880.svg" alt="">
                <h4>
                    Family Management System
                </h4>
                <p>Keep track of all your families</p>

            </div>
            <div class="right-section">
                <h3>Login</h3>
                <div class="form-group">
                    <label>Username</label>
                    <input type="text" placeholder="Username" @bind-value="_username"/>
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <input type="password" placeholder="Password" @bind-value="_password">
                </div>
                <p id="error-label">@_errorMessage</p>
                <button @onclick="PerformLogin">Login</button>
                <p class="create-acc-p">
                    Not registered yet? <span id="create-account-cta" @onclick="OnCreateAccount"> Create an account</span>
                </p>
                <p><span id="guest-login-cta" @onclick="LoginAsGuest">Continue As Guest</span></p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string _username;
    private string _password;
    private string _errorMessage;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
    //Redirects the user to index if user is already logged in.
       
        var user = (await AuthStat).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async void PerformLogin()
    {
        _errorMessage = "";
        try
        {
          await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(_username, _password);
            _username = "";
            _password = "";
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine($"{this} {nameof(PerformLogin)} caught exception");
            _errorMessage = e.Message; 
            StateHasChanged();
        }
    }

    private void OnCreateAccount()
    {
        NavigationManager.NavigateTo("/SignUp");
    }

    private async void LoginAsGuest()
    {
       await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin("Guest", "Guest");
        NavigationManager.NavigateTo("/");
    }

}